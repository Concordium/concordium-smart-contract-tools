name: Build and test

# This job runs rustfmt and clippy linting,
# cargo check on cargo-concordium,
# and then it runs cargo test and ./target/debug/wasm-test

on:
  push:
    branches: main

  pull_request:
    branches: main
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

  workflow_dispatch: # allows manual trigger

env:
  # from concordium/rustfmt:0.17
  RUST_FMT: nightly-2022-06-09-x86_64-unknown-linux-gnu
  RUST_CLIPPY: 1.62
  TARGET: wasm32-unknown-unknown
  NODEJS_VERSION: 18.x

jobs:
  "lint_fmt":
    name: ${{ matrix.build-dir }} lint:fmt
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-dir:
          - 'cargo-concordium'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_FMT }}
          override: true
          components: rustfmt
      - name: Format
        working-directory: ${{ matrix.build-dir }}
        run: |
          cargo fmt -- --color=always --check

  "lint_clippy":
    name: ${{ matrix.build-dir }} lint:clippy
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-dir:
          - 'cargo-concordium'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_CLIPPY }}
          override: true
          target: ${{ env.TARGET }}
          components: clippy
      - name: Clippy
        working-directory: ${{ matrix.build-dir }}
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          cargo clippy --color=always --tests --benches -- -Dclippy::all

  "cargo-concordium_cargo_build-bench":
    name: cargo-concordium cargo:build-bench
    runs-on: ubuntu-latest
    needs:
      - lint_clippy
      - lint_fmt
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_CLIPPY }}
          override: true
          target: ${{ env.TARGET }}
          components: clippy
      - name: Cargo check
        working-directory: cargo-concordium
        run: cargo check --benches --tests

  "cargo_test":
    name: ${{ matrix.build-dir }} cargo:test
    runs-on: ubuntu-latest
    needs:
      - cargo-concordium_cargo_build-bench
    strategy:
      matrix:
        build-dir:
          - 'cargo-concordium'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_CLIPPY }}
          override: true
      - name: Test
        working-directory: ${{ matrix.build-dir }}
        run: cargo test

  "vscode_extension_format":
    if: ${{ !github.event.pull_request.draft }}
    name: "Formatting: VS Code extension"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: Install dependencies
        working-directory: ./vscode-cargo-concordium
        run: npm ci

      - name: Check formatting
        working-directory: ./vscode-cargo-concordium
        run: npm run check-formatting

  "vscode_extension_lint":
    if: ${{ !github.event.pull_request.draft }}
    name: "Linting: VS Code extension"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: Install dependencies
        working-directory: ./vscode-cargo-concordium
        run: npm ci

      - name: Linting
        working-directory: ./vscode-cargo-concordium
        run: npm run lint
  "vscode_extension_test":
    if: ${{ !github.event.pull_request.draft }}
    needs:
      - vscode_extension_lint
      - vscode_extension_format
      - cargo_test
    name: "Testing: VS Code extension"
    strategy:
      matrix:
        os:
          - macos-latest # x86
          - ubuntu-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_CLIPPY }}
          override: true
          target: ${{ env.TARGET }}

      - name: Build cargo-concordium
        working-directory: cargo-concordium
        run: cargo build --release

      - name: Move cargo-concordium to executables for extension
        if: runner.os != 'Windows'
        run: mkdir -p vscode-cargo-concordium/executables && cp cargo-concordium/target/release/cargo-concordium vscode-cargo-concordium/executables/
      - name: Move cargo-concordium to executables for extension
        if: runner.os == 'Windows'
        shell: bash
        run: mkdir -p vscode-cargo-concordium/executables && cp cargo-concordium/target/release/cargo-concordium.exe vscode-cargo-concordium/executables/

      - name: Install Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: Install dependencies
        working-directory: ./vscode-cargo-concordium
        run: npm ci

      - name: Run tests
        if: runner.os == 'Linux'
        working-directory: ./vscode-cargo-concordium
        run: xvfb-run -a npm test # This is needed to launch vscode during the tests on the CI.
      - name: Run tests
        working-directory: ./vscode-cargo-concordium
        run: npm test
        if: runner.os != 'Linux'
